package com.srm.spring.dao;

import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.List;

import javax.persistence.EntityManager;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import com.srm.spring.dto.CustomerCredientialsDTO;
import com.srm.spring.dto.CustomerDetailsDTO;
import com.srm.spring.model.CustomerDetails;

@Repository
public class CustomerDetailsDAO {

	@Autowired
	SessionFactory sessionFactory;

	public CustomerDetails saveCustomerDetails(CustomerDetails custdtls) throws Exception {
		try {
			Session session = sessionFactory.getCurrentSession();
			session.save(custdtls);
		} catch (Exception ex) {
			throw ex;
		}
		return custdtls;
	}

	public CustomerDetails updateCustomerDetails(CustomerDetails custdtls) throws Exception {
		try {
			Session session = sessionFactory.getCurrentSession();
			session.saveOrUpdate(custdtls);
		} catch (Exception ex) {
			throw ex;
		}
		return custdtls;
	}

	public CustomerDetails retrieveCustomerDetails(Integer custid) throws Exception {
		CustomerDetails obj;
		try {
			Session session = sessionFactory.getCurrentSession();
			obj = (CustomerDetails) session.get(CustomerDetails.class, custid);
		} catch (Exception ex) {
			throw ex;
		}
		return obj;
	}

	public CustomerDetailsDTO retrieveCustomerAndCredientialDtls(Integer custid) throws Exception {
		CustomerDetailsDTO custDtls = new CustomerDetailsDTO();
		CustomerCredientialsDTO crediential = new CustomerCredientialsDTO();
		try {

			Session session = sessionFactory.getCurrentSession();

			String querystr = "Select cust.custid,cust.custname,cust.fathername,cust.dod,cust.occupation,cust.panno,"
					+ "crd.credientialid,crd.username,crd.password"
					+ " from CustomerDetails cust join CustomerCredientials crd on cust.custid=crd.custid and cust.custid="
					+ custid;

			Query<?> query = session.createSQLQuery(querystr);
			List<Object[]> result = (List<Object[]>) query.list();

			for (Object[] object : result) {

				custDtls.setCustid(new Integer(object[0].toString()));
				custDtls.setCustname(object[1].toString());
				custDtls.setFathername(object[2].toString());
				// Date dob=(Date) new SimpleDateFormat("yyyy-MM-dd
				// HH:mm:ss").parse(object[3].toString());
				// custDtls.setDod(dob);
				// custDtls.setDod(Date.valueOf(object[3].toString()));
				custDtls.setOccupation(object[4].toString());
				custDtls.setPanno(object[5].toString());
				crediential.setCredientialid(new Integer(object[6].toString()));
				crediential.setUsername(object[7].toString());
				crediential.setPassword(object[8].toString());
			}

			custDtls.setCustCredientialsDTO(crediential);

		} catch (Exception ex) {
			throw ex;
		}
		return custDtls;
	}

	public CustomerDetailsDTO retrieveCustomerByHQL(Integer custid) throws Exception {
		CustomerDetailsDTO custDtls = new CustomerDetailsDTO();
		try {

			Session session = sessionFactory.getCurrentSession();

			String querystr = "FROM CustomerDetails cust WHERE cust.custid=" + custid;

			Query<?> query = session.createQuery(querystr);
			List<CustomerDetails> result = (List<CustomerDetails>) query.list();

			for (CustomerDetails custobj : result) {

				custDtls.setCustid(custobj.getCustid());
				custDtls.setCustname(custobj.getCustname());
				custDtls.setCustname(custobj.getFathername());
				custDtls.setDod(custobj.getDod());
				custDtls.setOccupation(custobj.getOccupation());
				custDtls.setPanno(custobj.getPanno());

			}

		} catch (Exception ex) {
			throw ex;
		}
		return custDtls;
	}

	public String updateCustomerDetailsbyHQL(CustomerDetails custdtls) throws Exception {
		String status = null;
		try {

			Session session = sessionFactory.getCurrentSession();
			int updatedEntities = session
					.createQuery("UPDATE CustomerDetails " + "SET occupation = :occupation,panno=:panno "
							+ "where custid=:custid")
					.setParameter("custid", custdtls.getCustid()).setParameter("occupation", custdtls.getOccupation())
					.setParameter("panno", custdtls.getPanno()).executeUpdate();
			session.getTransaction().commit();
			if (updatedEntities > 0) {
				status = "Customer details updated successfully";
			} else {
				status = "Customer details not updated successfully";
			}

		} catch (Exception ex) {
			status = "Customer details not updated successfully";
			throw ex;
		}
		return status;
	}

	public String deleteCustomerDetailsbyHQL(Integer custid) throws Exception {
		String status = null;
		try {
			Session session = sessionFactory.getCurrentSession();
			/*
			 * session.createQuery( "DELETE CustomerCredientials" +
			 * " where custid=:custid")
			 * .setParameter("custid",custid).executeUpdate();
			 */
			session.createQuery("DELETE CustomerAddressDetails" + " where custid=:custid")
					.setParameter("custid", custid).executeUpdate();
			session.createQuery("DELETE CustomerDetails" + " where custid=:custid").setParameter("custid", custid)
					.executeUpdate();
			session.getTransaction().commit();
			status = "Customer details deleted successfully";
		} catch (Exception ex) {
			status = "Customer details not deleted successfully";
			throw ex;
		}
		return status;

	}
	
	
	public CustomerDetails getCustomerDetailsByNamedQuery(Integer custId){
		CustomerDetails custDetails = null;
		try{
			 /*//Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession();
			 EntityManager em = entityManagerFactory.createEntityManager();
			 //List<CustomerDetails> custdtls = em.createNamedQuery("CustomerDetails.findByCustId", CustomerDetails.class).getResultList();
			 //TypedQuery query = em.getNamedQuery("CustomerDetails.findByCustId");    
	         //query.setParameter("custid","custid");   
			 CustomerDetails custdtls = em.createNamedQuery("CustomerDetails.findByCustId", CustomerDetails.class)
		                .setParameter("custid",custId)
		                .getSingleResult();
	        */
			
			Session session = sessionFactory.getCurrentSession();
			Query query = session.getNamedQuery("CustomerDetails.findByCustId"); 
			query.setParameter("custid",custid); 
			
			
			List<CustomerDetails> result = (List<CustomerDetails>) query.list();
			
			
					
	     }catch(Exception ex){
	    	 throw ex; 
	     }
		return custDetails;
	}

}
